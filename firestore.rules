rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // Helper Functions
    // ============================================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isOrganizer(eventId) {
      return isSignedIn() && 
        get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }
    
    // ============================================
    // Users Collection
    // ============================================
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isSignedIn();
      
      // Users can create their own profile during registration
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Users can only update/delete their own profile
      allow update, delete: if isOwner(userId);
    }
    
    // ============================================
    // Events Collection
    // ============================================
    match /events/{eventId} {
      // Events are public - anyone can read
      allow read: if true;
      
      // Only authenticated users can create events
      allow create: if isSignedIn() && 
        request.resource.data.organizerId == request.auth.uid;
      
      // Only the event organizer can update or delete
      allow update, delete: if isSignedIn() && 
        resource.data.organizerId == request.auth.uid;
      
      // Sessions subcollection
      match /sessions/{sessionId} {
        // Sessions are public
        allow read: if true;
        
        // Authenticated users can create sessions
        allow create: if isSignedIn();
        
        // Event organizer or session creator can update/delete
        allow update, delete: if isSignedIn();
      }
    }
    
    // ============================================
    // Sessions Collection (Top-level)
    // ============================================
    match /sessions/{sessionId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
    
    // ============================================
    // Tickets Collection
    // ============================================
    match /tickets/{ticketId} {
      // Users can only read their own tickets
      allow read: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || 
         isOrganizer(resource.data.eventId));
      
      // Users can purchase tickets (create)
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own tickets (for check-in status)
      // Organizers can also update tickets for their events
      allow update: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || 
         isOrganizer(resource.data.eventId));
      
      // Only ticket owner can delete
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ============================================
    // Speakers Collection
    // ============================================
    match /speakers/{speakerId} {
      // Speakers are public
      allow read: if true;
      
      // Authenticated users can create speaker profiles
      allow create: if isSignedIn();
      
      // Speaker can update their own profile
      allow update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || 
         request.auth.uid == speakerId);
    }
    
    // ============================================
    // Sponsors Collection
    // ============================================
    match /sponsors/{sponsorId} {
      // Sponsors are public
      allow read: if true;
      
      // Event organizers can create sponsors
      allow create: if isSignedIn();
      
      // Event organizer can update/delete sponsors for their event
      allow update, delete: if isSignedIn() && 
        isOrganizer(resource.data.eventId);
    }
    
    // ============================================
    // Chats Collection
    // ============================================
    match /chats/{chatId} {
      // Only participants can read the chat
      allow read: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Authenticated users can create chats
      allow create: if isSignedIn() && 
        request.auth.uid in request.resource.data.participants;
      
      // Participants can update the chat
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Participants can delete the chat
      allow delete: if isSignedIn() && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read messages
        allow read: if isSignedIn() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Participants can send messages
        allow create: if isSignedIn() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        
        // Sender can update/delete their own messages
        allow update, delete: if isSignedIn() && 
          resource.data.senderId == request.auth.uid;
      }
    }
    
    // ============================================
    // Notifications Collection
    // ============================================
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // System can create notifications (via Cloud Functions)
      // Users can also create for themselves
      allow create: if isSignedIn();
      
      // Users can update their own notifications (mark as read)
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // AI Recommendations Collection
    // ============================================
    match /ai_recommendations/{recommendationId} {
      // Users can only read their own recommendations
      allow read: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // System creates recommendations (via Cloud Functions/AI)
      allow create: if isSignedIn();
      
      // Users can update (mark as viewed, interacted)
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      allow delete: if false; // Prevent deletion
    }
    
    // ============================================
    // Analytics Collection
    // ============================================
    match /analytics/{analyticsId} {
      // Event organizers can read their event analytics
      allow read: if isSignedIn();
      
      // Only system can write analytics
      allow create, update: if isSignedIn();
      
      allow delete: if false; // Prevent deletion of analytics
    }
    
    // ============================================
    // Default Deny All
    // ============================================
    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
